from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
import os

from aiogram.utils.exceptions import MessageCantBeDeleted, MessageToDeleteNotFound
from dotenv import load_dotenv, find_dotenv
from create_bot import bot
from database.sqlite_db import sql_add_command, sql_add_command2, sql_read_events, sql_add_command_meeting
from keyboards.client_kb import inline_kb, inline_faq_kb, inline_m_kb, meeting_kb
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from to_json import read_from_file, read_price, arr_j
from contextlib import suppress

load_dotenv(find_dotenv())


async def command_start(message: types.Message):
    try:

        if message.from_user.id >= 1:
            with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
                await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
        await bot.send_message(message.from_user.id,
                               '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! ‚ú®\n–Ø –ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ö–ü–¢ –∏ –ê–°–¢ –ø—Å–∏—Ö–æ–ª–æ–≥—É '
                               '–õ–µ–Ω–µ –ö–∞–±–∞–∫–æ–≤–æ–π ü§©\n\n</b>'
                               '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –õ–µ–Ω–æ–π, '
                               '–∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é.\n\n'
                               'üî∏ –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å\n–õ–µ–Ω–∞ –≤–µ–¥–µ—Ç –ø—Ä–∏–µ–º —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω\n\n'
                               '–ù–æ –µ—Å–ª–∏ –≤—ã –∏–∑ –ë–∞—Ç—É–º–∏, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∫—Ä—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ'
                               ' —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏: <b>@point_of_support</b> üòé',
                               reply_markup=inline_kb,
                               parse_mode=ParseMode.HTML)
    except Exception as ex:
        print(ex)


async def bio(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'{read_from_file()}\n\n'
                                  f'<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def prices(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'{read_price()}\n\n'
                                  f'<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


# REQUEST MENU
async def show_menu(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer('<B>–ú–µ–Ω—é</b>', reply_markup=inline_kb,
                                  parse_mode=ParseMode.HTML)


""" –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é """


class FSMClient(StatesGroup):
    """ Start the StatesMachine"""

    name = State()
    phone = State()
    gmt = State()
    comment = State()


async def writing_on_consult(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await FSMClient.name.set()
    await callback.message.answer('–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞.'
                                  '\n‚ö†Ô∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: <b>–æ—Ç–º–µ–Ω–∞</b>\n\n'
                                  '–®–∞–≥ 1.\n'
                                  '–î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!‚ò∫Ô∏è\n'
                                  '<b>–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?</b>', parse_mode=ParseMode.HTML)


async def cancel_handler(message: types.Message, state: FSMContext):
    """ CANCEL state """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.answer('OK. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. üëçüèª', reply_markup=inline_m_kb)


async def load_name(message: types.Message, state: FSMContext):
    """ Catch name and write in table """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)

    async with state.proxy() as data:
        data['name'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await FSMClient.next()
    await message.answer('–®–∞–≥ 2.\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


async def load_phone(message: types.Message, state: FSMContext):
    """ Catch a phone number """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['phone_n'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await FSMClient.next()
    await message.answer('–®–∞–≥3.\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.')


async def load_gmt(message: types.Message, state: FSMContext):
    """Catch a Timezone """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['gmt'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await FSMClient.next()
    await message.answer('–®–∞–≥4.\n–ú–æ–∂–µ—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å,\n'
                         ' —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.')


async def load_comment(message: types.Message, state: FSMContext):
    """ Catch a comment """

    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['comment'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await sql_add_command(state)
    await state.finish()
    if await message.answer(f'–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n'
                            ' –õ–µ–Ω–∞ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!üòä\n\n'
                            '<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:</b>',
                            reply_markup=inline_m_kb,
                            parse_mode=ParseMode.HTML
                            ):
        await bot.send_message(chat_id=os.getenv('ID_NUM'),
                               text='You have a new query! üòä '
                                    'Please check the database!')
        await message.delete()


""" FAQ part """


async def faq(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer('<b>üî∂ –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)


async def first_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É?</b>\n\n'
                                  f'{arr_j[0]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def second_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞?üëçüèª</b>\n\n'
                                  f'{arr_j[1]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def eight_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ß—Ç–æ —Ç–∞–∫–æ–µ –ö–ü–¢ –∏ ACT?</b>\n\n'
                                  f'{arr_j[8]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def third_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –° –∫–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —è –º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?</b>\n\n'
                                  f'{arr_j[2]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def four_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Ä–∞–ø–∏—è?</b>\n\n'
                                  f'{arr_j[3]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def five_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?</b>\n\n'
                                  f'{arr_j[4]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def six_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Å—Å–∏–π, –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?</b>\n\n'
                                  f'{arr_j[5]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


async def seven_query(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ü—Å–∏—Ö–æ–ª–æ–≥, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä - –≤ —á–µ–º –æ—Ç–ª–∏—á–∏—è?</b>\n\n'
                                  f'{arr_j[6]}\n\n'
                                  f'<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=inline_faq_kb)


"""Send Your Question part"""


class FormQuestion(StatesGroup):
    """ Start the StatesMachine """
    question = State()
    name = State()
    phone_n = State()


async def send_question(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await FormQuestion.question.set()
    await callback.message.answer('üî∂ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n'
                                  ' –∏ –õ–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n'
                                  '‚ö†Ô∏è –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: <b>–æ—Ç–º–µ–Ω–∞</b>', parse_mode=ParseMode.HTML)


async def cancel_state(message: types.Message, state: FSMContext):
    """ Cancel states """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply('OK. üëçüèª', reply_markup=inline_m_kb)


async def load_question(message: types.Message, state: FSMContext):
    """ Catch a first state """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['question'] = message.text.replace("<", "").replace(">", "").replace("%", "")

    await FormQuestion.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')


async def load_name2(message: types.Message, state: FSMContext):
    """ Catch a second state """

    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['name'] = message.text.replace("<", "").replace(">", "").replace("%", "")

    await FormQuestion.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')


async def load_phone_n(message: types.Message, state: FSMContext):
    """ Catch a third state and send it all in db """
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['phone_n'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await sql_add_command2(state)
    await state.finish()
    if await message.answer('–°–ø–∞—Å–∏–±–æ!\n –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n'
                            ' –õ–µ–Ω–∞ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!üòä\n\n'
                            '<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                            reply_markup=inline_m_kb,
                            parse_mode=ParseMode.HTML):
        await bot.send_message(chat_id=os.getenv('ID_NUM'),
                               text='–í–∞–º –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å! üòä '
                                    'Please check the database with Questions!')
        await message.delete()


""" Thematic meeting part"""


async def meeting(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    read = await sql_read_events()
    for row in read:
        await callback.message.answer(f'<b>–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏</b>\n\n'
                                      f'–ë–ª–∏–∂–∞–π—à–∞—è –≤—Å—Ç—Ä–µ—á–∞:\n\n'
                                      f'–¢–µ–º–∞: \n<b>{row[1]}</b>\n\n'
                                      f'–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>{row[2]}</b>\n'
                                      f'–î–∞—Ç–∞: <b>{row[3]}</b>\n'
                                      f'–ù–∞—á–∞–ª–æ: <b>{row[4]}</b>\n'
                                      f'–¶–µ–Ω–∞: <b>{row[5]}</b>\n',
                                      reply_markup=meeting_kb, parse_mode=ParseMode.HTML)


async def about_meeting(callback: types.CallbackQuery):
    if inline_m_kb or inline_kb:
        await callback.message.delete()
    await callback.message.answer(f'<b>üî∂ –ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—Å—Ç—Ä–µ—á–∏ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º?</b>\n\n'
                                  f'{arr_j[7]}\n\n'
                                  f'<b>–í–µ—Ä–Ω—É—Ç—å—Å—è:</b>',
                                  parse_mode=ParseMode.HTML,
                                  reply_markup=meeting_kb)


class FormMeeting(StatesGroup):
    full_name = State()
    phone_n = State()


async def write_on_meeting(callback: types.CallbackQuery):
    if inline_m_kb or meeting_kb:
        await callback.message.delete()
    await FormMeeting.full_name.set()
    await callback.message.answer('–ó–∞–ø–∏—Å—ã–≤–∞—é—é—é‚úçüèª \n<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é.</b>\n\n'
                                  '‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ c —Ç–µ–∫—Å—Ç–æ–º: <b>–æ—Ç–º–µ–Ω–∞</b>',
                                  parse_mode=ParseMode.HTML)


async def catch_full_name(message: types.Message, state: FSMContext):
    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['full_name'] = message.text.replace("<", "").replace(">", "").replace("%", "")

    await FormMeeting.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏:')


async def catch_phone_number(message: types.Message, state: FSMContext):
    await message.delete()
    if message.from_user.id >= 1:
        await bot.delete_message(message.chat.id, message_id=message.message_id - 1)
    async with state.proxy() as data:
        data['phone_n'] = message.text.replace("<", "").replace(">", "").replace("%", "")
    await sql_add_command_meeting(state)
    await state.finish()
    await message.answer(f'<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!</b>ü§©\n\n'
                         f'–ú—ã –ø—Ä–∏—à–ª–µ–º –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –∑–∞ –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                         reply_markup=inline_m_kb, parse_mode=ParseMode.HTML)


""" Register handlers part """


def register_handlers_client(dp: Dispatcher):
    """ Menu buttons handlers """

    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_callback_query_handler(bio, Text(startswith='/bio'))
    dp.register_callback_query_handler(prices, Text(startswith='/price'))
    dp.register_callback_query_handler(show_menu, Text(startswith='/Menu'))

    """ Register handlers for creating values for writing in SQLite table """

    dp.register_callback_query_handler(writing_on_consult, Text(startswith='/write'), state=None)
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(load_name, state=FSMClient.name)
    dp.register_message_handler(load_phone, state=FSMClient.phone)
    dp.register_message_handler(load_gmt, state=FSMClient.gmt)
    dp.register_message_handler(load_comment, state=FSMClient.comment)

    """ FAQ reg_handlers """

    dp.register_callback_query_handler(faq, Text(startswith='/faq'))
    dp.register_callback_query_handler(first_query, Text(startswith='/first_query'))
    dp.register_callback_query_handler(second_query, Text(startswith='/second_query'))
    dp.register_callback_query_handler(third_query, Text(startswith='/third_query'))
    dp.register_callback_query_handler(four_query, Text(startswith='/four_query'))
    dp.register_callback_query_handler(five_query, Text(startswith='/five_query'))
    dp.register_callback_query_handler(six_query, Text(startswith='/six_query'))
    dp.register_callback_query_handler(seven_query, Text(startswith='/seven_query'))
    dp.register_callback_query_handler(eight_query, Text(startswith='/eight_query'))

    '''FAQ send a question handlers'''

    dp.register_callback_query_handler(send_question, Text(startswith='/question'))
    dp.register_message_handler(cancel_state, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(load_question, state=FormQuestion.question)
    dp.register_message_handler(load_name2, state=FormQuestion.name)
    dp.register_message_handler(load_phone_n, state=FormQuestion.phone_n)

    """ Thematic meeting handlers """
    dp.register_callback_query_handler(meeting, Text(startswith='/meeting'))
    dp.register_callback_query_handler(about_meeting, Text(startswith='/about_meeting'))
    dp.register_callback_query_handler(write_on_meeting, Text(startswith='/thematic_write'), state=None)
    dp.register_message_handler(catch_full_name, state=FormMeeting.full_name)
    dp.register_message_handler(catch_phone_number, state=FormMeeting.phone_n)
