from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode
import os
from dotenv import load_dotenv, find_dotenv
from create_bot import bot
from database.sqlite_db import sql_add_command, sql_add_command2
from keyboards.client_kb import inline_kb, inline_faq_kb, inline_m_kb
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from to_json import read_from_file, read_price, arr_j

load_dotenv(find_dotenv())


async def command_start(message: types.Message):
    await bot.send_message(message.from_user.id,
                           '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! ‚ú®\n–Ø –ë–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –ö–ü–¢ –∏ –ê–°–¢ –ø—Å–∏—Ö–æ–ª–æ–≥—É '
                           '–õ–µ–Ω–µ –ö–∞–±–∞–∫–æ–≤–æ–π ü§©\n</b>',
                           parse_mode=ParseMode.HTML)
    await bot.send_message(message.from_user.id,
                           '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –õ–µ–Ω–æ–π, '
                           '–∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Å—Å–∏—é.\n\n'
                           'üî∏ –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å\n–õ–µ–Ω–∞ –≤–µ–¥–µ—Ç –ø—Ä–∏–µ–º —Ç–æ–ª—å–∫–æ –æ–Ω–ª–∞–π–Ω\n\n'
                           '–ù–æ –µ—Å–ª–∏ –≤—ã –∏–∑ –ë–∞—Ç—É–º–∏, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –∫—Ä—É—Ç—ã–µ –∏ –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–µ'
                           ' –æ—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏: <b>@point_of_support</b> üòé',
                           reply_markup=inline_kb,
                           parse_mode=ParseMode.HTML)


async def bio(callback: types.CallbackQuery):
    await callback.message.answer(read_from_file())
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>', reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def prices(callback: types.CallbackQuery):
    await callback.message.answer(read_price())
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>', reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


# REQUEST MENU
async def show_menu(callback: types.CallbackQuery):
    await callback.message.answer('<B>–ú–µ–Ω—é</b>', reply_markup=inline_kb,
                                  parse_mode=ParseMode.HTML)


""" –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é """


class FSMClient(StatesGroup):
    """ –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π """
    name = State()
    phone = State()
    gmt = State()
    comment = State()


async def writing_on_consult(callback: types.CallbackQuery):
    await FSMClient.name.set()
    await callback.message.reply('–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É, –æ—Ç–≤–µ—Ç—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ 4 –≤–æ–ø—Ä–æ—Å–∞.'
                                 '\n‚ö†Ô∏è –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å: –æ—Ç–º–µ–Ω–∞')
    await callback.message.reply('–®–∞–≥ 1.\n'
                                 '–î–∞–≤–∞–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!‚ò∫Ô∏è\n'
                                 '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?')


async def cancel_handler(message: types.Message, state: FSMContext):
    """ CANCEL state """
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('OK. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. üò´')


async def load_name(message: types.Message, state: FSMContext):
    """ Catch name and write in table """
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMClient.next()
    await message.reply('–®–∞–≥ 2.\n–í–≤–µ–¥–∏—Ç–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


async def load_phone(message: types.Message, state: FSMContext):
    """ Catch a phone number """
    async with state.proxy() as data:
        data['phone_n'] = message.text
    await FSMClient.next()
    await message.reply('–®–∞–≥3.\n–ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ. –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.')


async def load_gmt(message: types.Message, state: FSMContext):
    """Catch a Timezone """
    async with state.proxy() as data:
        data['gmt'] = message.text
    await FSMClient.next()
    await message.reply('–®–∞–≥4.\n–ú–æ–∂–µ—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è.')


async def load_comment(message: types.Message, state: FSMContext):
    """ Catch a comment """
    async with state.proxy() as data:
        data['comment'] = message.text
    await sql_add_command(state)
    await state.finish()
    if await message.answer('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.'
                            ' –õ–µ–Ω–∞ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!üòä'):
        await bot.send_message(chat_id=os.getenv('ID_NUM'),
                               text='You have a new query! üòä '
                                    'Please check the database!')
        await message.delete()
    await message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:</b>',
                         reply_markup=inline_m_kb,
                         parse_mode=ParseMode.HTML)


""" FAQ """


async def faq(callback: types.CallbackQuery):
    await callback.message.reply('<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>',
                                 reply_markup=inline_faq_kb,
                                 parse_mode=ParseMode.HTML)


async def first_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥—É?</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[0])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def second_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∞?üëçüèª</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[1])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def third_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–° –∫–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —è –º–æ–≥—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[2])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def four_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–µ—Å—Å–∏—è?</b>', parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[3])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def five_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[4])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def six_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–µ—Å—Å–∏–π, –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[5])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


async def seven_query(callback: types.CallbackQuery):
    await callback.message.answer('<b>–ü—Å–∏—Ö–æ–ª–æ–≥, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä - –≤ —á–µ–º –æ—Ç–ª–∏—á–∏—è?</b>',
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer(arr_j[6])
    await callback.message.answer('<b>–ï—â–µ –≤–æ–ø—Ä–æ—Å—ã:</b>',
                                  reply_markup=inline_faq_kb,
                                  parse_mode=ParseMode.HTML)
    await callback.message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</b>',
                                  reply_markup=inline_m_kb,
                                  parse_mode=ParseMode.HTML)


class FormQuestion(StatesGroup):
    """ Register states """
    question = State()
    name = State()
    phone_n = State()


async def send_question(callback: types.CallbackQuery):
    await FormQuestion.question.set()
    await callback.message.answer('<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>\n'
                                  ' –∏ –õ–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                                  '–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: <b>–æ—Ç–º–µ–Ω–∞</b>', parse_mode=ParseMode.HTML)


# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def cancel_state(message: types.Message, state: FSMContext):
    """ Cancel states"""
    cur_state = await state.get_state()
    if cur_state is None:
        return
    await state.finish()
    await message.reply('OK. –û—Ç–º–µ–Ω—è—é. üò´')


# @dp.message_handler(state=FormQuestion.question)
async def load_question(message: types.Message, state: FSMContext):
    """ catch a first state"""
    async with state.proxy() as data:
        data['question'] = message.text

    await FormQuestion.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')


# @dp.message_handler(state=FormQuestion.name)
async def load_name2(message: types.Message, state: FSMContext):
    """ Catch a second state """
    async with state.proxy() as data:
        data['name'] = message.text

    await FormQuestion.next()
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,'
                         '\n—á—Ç–æ–±—ã –õ–µ–Ω–∞ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∞:'
                         )


# @dp.message_handler(state=FormQuestion.phone_n)
async def load_phone_n(message: types.Message, state: FSMContext):
    """ Catch a third state and send it all in db"""
    async with state.proxy() as data:
        data['phone_n'] = message.text
    await sql_add_command2(state)
    await state.finish()
    if await message.answer('–°–ø–∞—Å–∏–±–æ!\n –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç.\n'
                            ' –õ–µ–Ω–∞ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è!üòä'):
        await bot.send_message(chat_id=os.getenv('ID_NUM'),
                               text='–í–∞–º –∑–∞–¥–∞–ª–∏ –≤–æ–ø—Ä–æ—Å! üòä '
                                    'Please check the database with Questions!')
        await message.delete()
    await message.answer('<b>–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:</b>',
                         reply_markup=inline_m_kb,
                         parse_mode=ParseMode.HTML)


def register_handlers_client(dp: Dispatcher):
    """ Menu buttons handlers """
    dp.register_message_handler(command_start, commands=['start', 'help'])
    dp.register_callback_query_handler(bio, Text(startswith='/bio'))
    dp.register_callback_query_handler(prices, Text(startswith='/price'))
    dp.register_callback_query_handler(show_menu, Text(startswith='/Menu'))

    ''' register handlers for creating values for writing in SQLite table '''
    dp.register_callback_query_handler(writing_on_consult, Text(startswith='/write'), state=None)
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(load_name, state=FSMClient.name)
    dp.register_message_handler(load_phone, state=FSMClient.phone)
    dp.register_message_handler(load_gmt, state=FSMClient.gmt)
    dp.register_message_handler(load_comment, state=FSMClient.comment)

    ''' FAQ reg_handlers '''
    dp.register_callback_query_handler(faq, Text(startswith='/faq'))
    dp.register_callback_query_handler(first_query, Text(startswith='/first_query'))
    dp.register_callback_query_handler(second_query, Text(startswith='/second_query'))
    dp.register_callback_query_handler(third_query, Text(startswith='/third_query'))
    dp.register_callback_query_handler(four_query, Text(startswith='/four_query'))
    dp.register_callback_query_handler(five_query, Text(startswith='/five_query'))
    dp.register_callback_query_handler(six_query, Text(startswith='/six_query'))
    dp.register_callback_query_handler(seven_query, Text(startswith='/seven_query'))
    '''FAQ send a question'''
    dp.register_callback_query_handler(send_question, Text(startswith='/question'))
    dp.register_message_handler(cancel_state, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    dp.register_message_handler(load_question, state=FormQuestion.question)
    dp.register_message_handler(load_name2, state=FormQuestion.name)
    dp.register_message_handler(load_phone_n, state=FormQuestion.phone_n)
